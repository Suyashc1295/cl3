//Alice
//Key.java
package Alice;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.*;

public class Key {
   public int primeCenterie = 20;
   public BigInteger q;
   public BigInteger p;
   public BigInteger g;
   public BigInteger y;
   public BigInteger x;
   public BigInteger k;
   Random rand = new Random();

Key() {}

public void generateKey() {
    q = new BigInteger(160, primeCenterie, rand);
    p = generateP(q, 512);
    g = generateG(p, q);
    do {
        x = new BigInteger(q.bitCount(), rand);
    } while (x.compareTo(BigInteger.ZERO) != 1 && x.compareTo(q) != -1);
    y = g.modPow(x, p);
}

private BigInteger generateP(BigInteger q, int l) {
    if (l % 64 != 0) {
        throw new IllegalArgumentException("L value is wrong");
    }
    BigInteger pTemp;
    BigInteger pTemp2;
    do {
        pTemp = new BigInteger(l, primeCenterie, rand);
        pTemp2 = pTemp.subtract(BigInteger.ONE);
        pTemp = pTemp.subtract(pTemp2.remainder(q));
        
    } while (!pTemp.isProbablePrime(primeCenterie) || pTemp.bitLength() != l);
    return pTemp;
}

private BigInteger generateG(BigInteger p, BigInteger q) {
    BigInteger aux = p.subtract(BigInteger.ONE);
    BigInteger pow = aux.divide(q);
    BigInteger h,g;
    do {
        h = new BigInteger(aux.bitLength(), rand);
        g = h.modPow(pow, p);
    } while (h.compareTo(p) != -1 && h.compareTo(BigInteger.ONE) != 1 && g.modPow(q, p) != BigInteger.ONE);
    return g;
}

public BigInteger generateK(BigInteger q) {
    BigInteger tempK;
    do {
        tempK = new BigInteger(q.bitLength(), rand);
    } while (tempK.compareTo(q) != -1 && tempK.compareTo(BigInteger.ZERO) != 1);
    return tempK;
}

public BigInteger generateR() {
    k = generateK(q);
    BigInteger r = g.modPow(k, p).mod(q);
    return r;
}

public BigInteger generateS(BigInteger r, byte[] data) {
    MessageDigest md;
    BigInteger s = BigInteger.ONE;
    try {
        md = MessageDigest.getInstance("SHA-1");
        md.update(data);
        BigInteger hash = new BigInteger(md.digest());
        s = (k.modInverse(q).multiply(hash.add(x.multiply(r)))).mod(q);
    } catch (NoSuchAlgorithmException ex) {
        System.out.println("No Such Algorithm Exception");
    }    return s;
}

boolean verify(byte[] data, BigInteger r, BigInteger s) {
    if (r.compareTo(BigInteger.ZERO) <= 0 || r.compareTo(q) >= 0) {
        return false;
    }
    if (s.compareTo(BigInteger.ZERO) <= 0 || s.compareTo(q) >= 0) {
        return false;
    }
    MessageDigest md;
    BigInteger v = BigInteger.ZERO;
    try {
        md = MessageDigest.getInstance("SHA-1");
        md.update(data);
        BigInteger hash = new BigInteger(md.digest());
        BigInteger w = s.modInverse(q);
        BigInteger u1 = hash.multiply(w).mod(q);
        BigInteger u2 = r.multiply(w).mod(q);
        v = ((g.modPow(u1, p).multiply(y.modPow(u2, p))).mod(p)).mod(q);
    } catch (NoSuchAlgorithmException ex) {
    	System.out.println("No Such Algorithm Exception");
    }
    return v.compareTo(r) == 0;
}

};

//Server.java
package Alice;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;

public class Server{

private static Socket socket;

public static void main(String[] args)
{
    try
    {
    	Key obj = new Key();
        int port = 25000;
        ServerSocket serverSocket = new ServerSocket(port);
        //Server is running always. This is done using this while(true) loop
        
            //Reading the message from the client
            socket = serverSocket.accept();
            System.out.println("Client has connected!");
            InputStream is = socket.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            
            String p = br.readLine();
            String q = br.readLine();
            String g = br.readLine();
            String y = br.readLine();
            String r = br.readLine();
            String s = br.readLine();
            String data = br.readLine();
            
            System.out.println("Message received from client");
            System.out.println("p :: "+p);
            System.out.println("q :: "+q);
            System.out.println("g :: "+g);
            System.out.println("y :: "+y);
            System.out.println("r :: "+r);
            System.out.println("s :: "+s);
            System.out.println("data :: "+data);
            
        	System.out.println("\n:: :: Signature Verification :: ::");
        	obj.p = new BigInteger(p);
        	obj.q = new BigInteger(q);
        	obj.g = new BigInteger(g);
        	obj.y = new BigInteger(y);
        	BigInteger Bigr = new BigInteger(r);
        	BigInteger Bigs = new BigInteger(s);
        	
        	if(obj.verify(data.getBytes(),Bigr, Bigs))
        	{
        		System.out.println("Algorithm Valid");
        	}
        	else
        	{
        		System.out.println("Algorithm Invalid");
        	}
    }
    catch (Exception e)
    {
        e.printStackTrace();
    }
}
}

/*

Client has connected!
Message received from client
p :: 10638248607351893257917336175508090676399321045830405559651003249997922301858067243390610700936867121043705247912395110165701207526219945734239409818186071
q :: 1351682568025273056153441759721089982115174392769
g :: 10073689339926699973121221641679128848594842914939299101622124847727851237338291506999538213411632451871540872623673285594751376979067982666576212392522596
y :: 3452134297098264914167801381372443258406929179003533944013914579443629151851278888748096984964090046868101304012765722196981903782205369873799431765556765
r :: 548602039073742572171448640589478091970695789566
s :: 1235879327190787547927302970249950072942842718942
data :: prashant and priyanka

:: :: Signature Verification :: ::
Algorithm Valid

*/

//Bob
//Key.java
package Bob;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.*;

public class Key {
   int primeCenterie = 20;
   BigInteger q;
   BigInteger p;
   BigInteger g;
   BigInteger y;
   BigInteger x;
   BigInteger k;
   Random rand = new Random();

Key() {}

public void generateKey() {
    q = new BigInteger(160, primeCenterie, rand);
    p = generateP(q, 512);
    g = generateG(p, q);
    do {
        x = new BigInteger(q.bitCount(), rand);
    } while (x.compareTo(BigInteger.ZERO) != 1 && x.compareTo(q) != -1);
    y = g.modPow(x, p);
}

private BigInteger generateP(BigInteger q, int l) {
    if (l % 64 != 0) {
        throw new IllegalArgumentException("L value is wrong");
    }
    BigInteger pTemp;
    BigInteger pTemp2;
    do {
        pTemp = new BigInteger(l, primeCenterie, rand);
        pTemp2 = pTemp.subtract(BigInteger.ONE);
        pTemp = pTemp.subtract(pTemp2.remainder(q));
        
    } while (!pTemp.isProbablePrime(primeCenterie) || pTemp.bitLength() != l);
    return pTemp;
}

private BigInteger generateG(BigInteger p, BigInteger q) {
    BigInteger aux = p.subtract(BigInteger.ONE);
    BigInteger pow = aux.divide(q);
    BigInteger h,g;
    do {
        h = new BigInteger(aux.bitLength(), rand);
        g = h.modPow(pow, p);
    } while (h.compareTo(p) != -1 && h.compareTo(BigInteger.ONE) != 1 && g.modPow(q, p) != BigInteger.ONE);
    return g;
}

public BigInteger generateK(BigInteger q) {
    BigInteger tempK;
    do {
        tempK = new BigInteger(q.bitLength(), rand);
    } while (tempK.compareTo(q) != -1 && tempK.compareTo(BigInteger.ZERO) != 1);
    return tempK;
}

public BigInteger generateR() {
    k = generateK(q);
    BigInteger r = g.modPow(k, p).mod(q);
    return r;
}

public BigInteger generateS(BigInteger r, byte[] data) {
    MessageDigest md;
    BigInteger s = BigInteger.ONE;
    try {
        md = MessageDigest.getInstance("SHA-1");
        md.update(data);
        BigInteger hash = new BigInteger(md.digest());
        s = (k.modInverse(q).multiply(hash.add(x.multiply(r)))).mod(q);
    } catch (NoSuchAlgorithmException ex) {
        System.out.println("No Such Algorithm Exception");
    }    return s;
}
};

//Client.java
package Bob;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Scanner;

public class Client{

private static Socket socket;

public static void main(String args[])
{
	Scanner sc = new Scanner(System.in);
	System.out.print("Input Data :: ");
	String data = sc.nextLine();
	
	Key obj = new Key();
	System.out.println("\n:: :: DSA Algorithm:: ::\n:: :: Key Generation:: ::");
	obj.generateKey();
	
	System.out.println("Public Key (p,q,g,y)");
	System.out.println("p :: "+obj.p);
	System.out.println("q :: "+obj.q);
	System.out.println("g :: "+obj.g);
	System.out.println("y :: "+obj.y);
	
	System.out.println("\n:: :: Signature Generation :: ::");
	System.out.println("Digital Signature m(r,s)");
	BigInteger r = obj.generateR();
	BigInteger s = obj.generateS(r, data.getBytes());
	System.out.println("r :: "+r);
	System.out.println("s :: "+s);
	
    try
        {
            String host = "localhost";
            int port = 25000;
            InetAddress address = InetAddress.getByName(host);
            socket = new Socket(address, port);
            //System.out.println("You're now connected to the Server"); /*this should only print once */
            //Send the message to the server
            OutputStream os = socket.getOutputStream();
            OutputStreamWriter osw = new OutputStreamWriter(os);
            BufferedWriter bw = new BufferedWriter(osw);

            String sendMessage = obj.p + "\n";
            bw.write(sendMessage);
            
            sendMessage = obj.q + "\n";
            bw.write(sendMessage);
            
            sendMessage = obj.g + "\n";
            bw.write(sendMessage);
            
            sendMessage = obj.y + "\n";
            bw.write(sendMessage);
            
            sendMessage = r + "\n";
            bw.write(sendMessage);
            
            sendMessage = s + "\n";
            bw.write(sendMessage);
            
            sendMessage = data + "\n";
            bw.write(sendMessage);
            
            bw.flush();
            System.out.println("Data sent to the server");
        }
        catch (IOException exception)
        {
            System.out.println("Server is still offline");/*This should only print once*/
        }
}
}

/*

Input Data :: prashant and priyanka

:: :: DSA Algorithm:: ::
:: :: Key Generation:: ::
Public Key (p,q,g,y)
p :: 10638248607351893257917336175508090676399321045830405559651003249997922301858067243390610700936867121043705247912395110165701207526219945734239409818186071
q :: 1351682568025273056153441759721089982115174392769
g :: 10073689339926699973121221641679128848594842914939299101622124847727851237338291506999538213411632451871540872623673285594751376979067982666576212392522596
y :: 3452134297098264914167801381372443258406929179003533944013914579443629151851278888748096984964090046868101304012765722196981903782205369873799431765556765

:: :: Signature Generation :: ::
Digital Signature m(r,s)
r :: 548602039073742572171448640589478091970695789566
s :: 1235879327190787547927302970249950072942842718942
Data sent to the server

*/
